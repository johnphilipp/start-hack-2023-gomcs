import React, { useEffect, useState } from "react";
import Head from "next/head";
import { signOut, useSession } from "next-auth/react";
import { useRouter } from "next/router";
import Spinner from "~/components/Spinner";
import { NextPage } from "next";
import UploadData from "~/components/UploadData";
import Analytics from "~/components/Analytics";
import {TransportStats} from "~/components/TransportStats";
import {DistanceStats, StatsSegmentsProps} from "~/components/DistanceStats";
import CO2Piechart from "~/components/CO2Piechart";

const DashboardPage: NextPage = () => {
  const { data: sessionData, status } = useSession();

  const router = useRouter();

  const [buttonClicked, setButtonClicked] = useState(false);
  const [loading, setLoading] = useState(false);
  const [userHasDataInDb, setUserHasDataInDb] = useState(true);

  // MOCKED:

  const handleClick = () => {
    setButtonClicked(true);
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
    }, 1000);
  };

  // NOT MOCKED:

  // const handleClick = async () => {
  //   setLoading(true);

  //   if (sessionData) {
  //     const userId = sessionData.user.id;
  //     const response = await fetch(
  //       `${process.env.NEXT_PUBLIC_BACKEND_URL}/loadTimeline/${userId}`
  //     );
  //     if (response.status === 200) {
  //       console.log("DEBUG: [/dashboard] 200 -- loaded timeline");
  //     } else if (response.status === 204) {
  //       console.log("DEBUG: [/dashboard] 204 -- could not load data");
  //     } else {
  //       console.log("Error loading timeline");
  //     }
  //   }
  // };

  if (status === "loading") {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <Spinner />
      </div>
    );
  }

  if (!sessionData) {
    router.push("/");
    return null;
  }

  // TODO: change distance stats
  const distanceData: StatsSegmentsProps = {
    total: 5000,
    diff: 30,
    data: [
      {
        label: 'Airplane',
        count: 5000 * 0.1,
        part: 10,
        color: '#d9480f'
      },
      {
        label: 'Car',
        count: 5000 * 0.4,
        part: 40,
        color: '#e8590c'
      },
      {
        label: 'Train',
        count: 5000 * 0.3,
        part: 20,
        color: '#f08c00'
      },
      {
        label: 'Ferry',
        count: 5000 * 0.1,
        part: 10,
        color: '#fcc419'
      },
      {
        label: 'Bike',
        count: 5000 * 0.2,
        part: 20,
        color: '#2f9e44'
      }
    ]
  }

  return (
    <>
      <Head>
        <title>Timeliner</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Timeliner
          </h1>

          <h2 className="text-2xl font-bold tracking-tight text-white sm:text-[2rem]">
            {" "}
          </h2>
          <div className="flex flex-row items-center justify-center items-stretch gap-4">
            <CO2Piechart />
            <DistanceStats total={distanceData.total} diff={distanceData.diff} data={distanceData.data}/>
          </div>
          <TransportStats />

          <div className="w-full border-t border-gray-500" />

          <div className="flex flex-col items-center justify-center gap-4">
            <p className="text-center text-2xl text-white">
              {sessionData && (
                <span>Logged in as {sessionData.user?.name}</span>
              )}
            </p>
            <button
              className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
              onClick={() => void signOut()}
            >
              Log out
            </button>
          </div>

          <div className="w-full border-t border-gray-500" />

          <div className="flex flex-col items-center justify-center gap-4">
            <p className="text-center text-2xl text-white">Main dashboard</p>

            {/* button to check if user has data in backend db */}

            <button
              className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
              onClick={handleClick}
              disabled={loading}
            >
              {loading ? "Loading..." : "Check for data"}
            </button>

            {buttonClicked && userHasDataInDb && <Analytics />}

            {buttonClicked && !userHasDataInDb && <UploadData />}

            {/* button to delete data from backend db */}
          </div>
        </div>
      </main>
    </>
  );
};
export default DashboardPage;
